{"version":3,"sources":["serviceWorker.js","Environment.js","Login/Login.js","Dialog/DialogMat.js","DialogEdit/DialogEdit.js","ListCard/ListCard.js","Home/Home.js","Routes.js","index.js","ListCard/Listcard.module.css","Login/Login.module.css"],"names":["Boolean","window","location","hostname","match","config","apiUrl","Login","useForm","register","handleSubmit","errors","useState","message","setMessage","history","useHistory","className","styles","container","loginFormContainer","type","role","data","aria-hidden","onClick","onSubmit","e","axios","post","then","setTimeout","localStorage","setItem","token","push","target","reset","catch","error","JSON","stringify","noValidate","autoComplete","htmlFor","id","name","aria-describedby","placeholder","ref","required","value","username","errorMessage","password","DialogMat","props","open","setOpen","option","headers","Authorization","getItem","handleClose","Button","variant","color","children","Dialog","fullWidth","onClose","aria-labelledby","alert","DialogContent","DialogContentText","autoFocus","title","DialogActions","DialogEdit","dataedit","setDataedit","Fragment","get","description","put","onChange","ListCard","todolist","setTodolist","useEffect","getData","updateTodo","dataBox","map","item","index","listBox","key","_id","style","flex","trashButton","confirm","delete","overflowText","emptyData","boxScreen","Home","Routes","path","render","Component","to","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.5a2eb8fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config ={\r\n    apiUrl :'https://candidate.neversitup.com/todo'\r\n}\r\nexport default config","\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styles from \"./Login.module.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport config from \"../Environment\";\r\nimport axios from 'axios';\r\nconst Login = () => {\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [message, setMessage] = useState();\r\n    const history = useHistory();\r\n\r\n    const onSubmit = (data, e) => {\r\n        setMessage({\r\n            data: \"Login is in progress...\",\r\n            type: \"alert-warning\",\r\n        });\r\n        axios.post(`${config.apiUrl}/users/auth`, { ...data })\r\n            .then((data) => {\r\n                setMessage({\r\n                    data: \"Logged in successfully, redirecting...\",\r\n                    type: \"alert-success\"\r\n                });\r\n                setTimeout(() => {\r\n                    localStorage.setItem(\"token\", data.data.token);\r\n                    history.push(\"/home\");\r\n                }, 3000);\r\n                e.target.reset();\r\n            })\r\n            .catch((error) => {\r\n                setMessage({\r\n                    data: JSON.stringify(error.message) ,\r\n                    type: \"alert-danger\" ,\r\n                });\r\n            })\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`${styles.container} container-fluid d-flex align-items-center justify-content-center`}\r\n        >\r\n            <div className={styles.loginFormContainer}>\r\n                {message && (\r\n                    <div\r\n                        className={`alert fade show d-flex ${message.type}`}\r\n                        role=\"alert\"\r\n                    >\r\n                        {message.data}\r\n                        <span\r\n                            aria-hidden=\"true\"\r\n                            className=\"ml-auto cursor-pointer\"\r\n                            onClick={() => setMessage(null)}\r\n                        >\r\n                            &times;\r\n            </span>\r\n                    </div>\r\n                )}\r\n                <fieldset className=\"border p-3 rounded\">\r\n                    <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"inputForEmail\">Email address</label>\r\n                            <span className=\"mandatory\">*</span>\r\n                            <input\r\n                                id=\"inputForEmail\"\r\n                                name=\"username\"\r\n                                type=\"email\"\r\n                                className=\"form-control\"\r\n                                aria-describedby=\"Enter email address\"\r\n                                placeholder=\"Enter email address\"\r\n                                ref={register({\r\n                                    required: {\r\n                                      value: true,\r\n                                      message: \"Please enter your email address\",\r\n                                    },\r\n                                  })}\r\n                            />\r\n                            {errors.username && (\r\n                                <span className={`${styles.errorMessage} mandatory`}>\r\n                                    {errors.username.message}\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"inputForPassword\">Password</label>\r\n                            <span className=\"mandatory\">*</span>\r\n                            <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputForPassword\"\r\n                                placeholder=\"Enter password\"\r\n                                ref={register({\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: \"Please enter password\",\r\n                                    },\r\n                                })}\r\n                            />\r\n                            {errors.password && (\r\n                                <span className={`${styles.errorMessage} mandatory`}>\r\n                                    {errors.password.message}\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                            <button type=\"submit\" className=\"btn btn-outline-primary\">\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from '@material-ui/core/Button';\r\nimport './DialogMat.css';\r\nimport axios from 'axios';\r\nimport config from '../Environment'\r\n\r\nfunction DialogMat(props) {\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [open, setOpen] = useState(false);\r\n    const option = {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\r\n    };\r\n    const history = useHistory();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        axios.post(`${config.apiUrl}/todos/`,{...data},option)\r\n        .then((data=>{\r\n            setOpen(false)\r\n            history.push(\"/\");\r\n        }))\r\n        .catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n    return (\r\n        <div >\r\n            <Button className=\"font-weight-bold Gradient\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                {props.children}\r\n            </Button>\r\n            <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Title\r\n                        </DialogContentText>\r\n                        <input\r\n                            autoFocus\r\n                            id=\"title\"\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            className=\"fullWidth\"\r\n                            ref={register({\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please enter title\",\r\n                                },\r\n                            })}\r\n\r\n                        />\r\n                        {errors.title && (\r\n                            <span className=\"errorMessage d-block\">\r\n                                {errors.title.message}\r\n                            </span>\r\n                        )}\r\n                        <DialogContentText className=\"mt-2\">\r\n                            Description\r\n                        </DialogContentText>\r\n                        <textarea \r\n                        id=\"description\"\r\n                        name=\"description\"\r\n                        className=\"fullWidth\"\r\n                        ref={register({\r\n                            required:false\r\n                        })}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogMat\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from '@material-ui/core/Button';\r\nimport './DialogEdit.css';\r\nimport axios from 'axios';\r\nimport config from '../Environment'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nfunction DialogEdit(props) {\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [open, setOpen] = useState(false);\r\n    const [dataedit , setDataedit] = useState([])\r\n    const option = {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\r\n    };\r\n    const history = useHistory();\r\n    const getData =() =>{\r\n        axios.get(`${config.apiUrl}/todos/${props.id}`, option)\r\n        .then((data) => {\r\n            setDataedit({\r\n                title:data.data.title,\r\n                description:data.data.description\r\n            })\r\n        })\r\n        .catch((error) => { alert(error) })\r\n    }\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n        getData()\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n        axios.put(`${config.apiUrl}/todos/${props.id}`,{...data},option)\r\n        .then((data=>{\r\n            setOpen(false)\r\n            history.push(\"/\");\r\n        }))\r\n        .catch((error)=>{\r\n            alert(error)\r\n        })\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <button title=\"Edit\" className=\"iconUpate\" onClick={handleClickOpen}>\r\n                <EditIcon />\r\n            </button>\r\n            <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Title\r\n                        </DialogContentText>\r\n                        <input\r\n                            autoFocus\r\n                            id=\"title\"\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            className=\"fullWidth\"\r\n                            value={dataedit.title || ''}\r\n                            onChange={e => setDataedit({ ...dataedit, title: e.target.value })}\r\n                            ref={register({\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Please enter title\",\r\n                                },\r\n                            })}\r\n\r\n                        />\r\n                        {errors.title && (\r\n                            <span className=\"errorMessage d-block\">\r\n                                {errors.title.message}\r\n                            </span>\r\n                        )}\r\n                        <DialogContentText className=\"mt-2\">\r\n                            Description\r\n                        </DialogContentText>\r\n                        <textarea \r\n                        id=\"description\"\r\n                        name=\"description\"\r\n                        className=\"fullWidth\"\r\n                        value={dataedit.description}\r\n                        onChange={e => setDataedit({ ...dataedit, description: e.target.value })}\r\n                        ref={register({\r\n                            required:false\r\n                        })}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                    </Button>\r\n                        <Button type=\"submit\" color=\"primary\">\r\n                            Create\r\n                    </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DialogEdit\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport config from '../Environment'\r\nimport styles from './Listcard.module.css'\r\nimport DialogMat from '../Dialog/DialogMat'\r\nimport DialogEdit from '../DialogEdit/DialogEdit'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nconst ListCard = () => {\r\n    const [todolist, setTodolist] = useState([])\r\n    const option = {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n    },[])\r\n    const getData =() =>{\r\n        axios.get(`${config.apiUrl}/todos/`, option)\r\n        .then((data) => {\r\n            setTodolist(data.data)\r\n        })\r\n        .catch((error) => { alert(error) })\r\n    }\r\n    const deleteTodo = (id) =>{\r\n        if(window.confirm('Confirm Delete')){\r\n            axios.delete(`${config.apiUrl}/todos/${id}`,option)\r\n            .then((data=>{\r\n                getData()\r\n            }))\r\n            .catch((error) =>{\r\n            })\r\n        }\r\n    }\r\n    const updateTodo = () =>{\r\n\r\n    }\r\n    return (\r\n        <div className=\"pt-4\">\r\n            {todolist != '' ?\r\n                <div className={`${styles.dataBox}`}>\r\n                    {\r\n                        todolist.map((item, index) => (\r\n                            <div className={`${styles.listBox} d-block rounded alert`} key={item._id} onClick={updateTodo}>\r\n                                <div className=\"d-flex\"><h4 style={{flex:'1'}}>{item.title}</h4> \r\n                                <DialogEdit id={item._id}/>\r\n                                <button title=\"Delete\" className={`${styles.trashButton} rounded `} onClick={() => deleteTodo(item._id)}><DeleteIcon /></button>\r\n                                </div>\r\n                                <hr></hr>\r\n                                <p className={`${styles.overflowText}`}>{item.description}</p>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div> :\r\n                <div className={`${styles.emptyData} ${styles.boxScreen} d-flex text-center mb-4`}>\r\n                    <h1>Empty press 'Create' For add new todo</h1>\r\n                </div>\r\n            }\r\n            <div className=\"fixed-bottom text-center mb-5\">\r\n                <DialogMat>+ Create</DialogMat>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListCard\r\n","import React from \"react\";\r\nimport ListCard from \"../ListCard/ListCard\";\r\nimport './Home.css'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <ListCard />\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport {\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Login from \"./Login/Login\";\r\nimport Home from \"./Home/Home\";\r\nconst authGuard = (Component) => () => {\r\n    return localStorage.getItem(\"token\") ? (\r\n      <Component />\r\n    ) : (\r\n      <Redirect to=\"/login\" />\r\n    );\r\n  };\r\nconst Routes = (props) => (\r\n  <Router {...props}>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <Route path=\"/home\" render={authGuard(Home)}>\r\n      </Route>\r\n      <Route exact path=\"/\">\r\n        <Redirect to=\"/home\" />\r\n      </Route>\r\n      <Route path=\"*\">\r\n      <Redirect to=\"/login\" />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\nexport default Routes;","import React from 'react';\nimport ReactDOM  from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from \"./Routes\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxScreen\":\"Listcard_boxScreen__guRRD\",\"dataBox\":\"Listcard_dataBox__2QtHY\",\"emptyData\":\"Listcard_emptyData__2oUIE\",\"listBox\":\"Listcard_listBox__1Tlnq\",\"trashButton\":\"Listcard_trashButton__1VUhp\",\"overflowText\":\"Listcard_overflowText__1lk7Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__3lQu_\",\"loginFormContainer\":\"Login_loginFormContainer__1JX1c\",\"errorMessage\":\"Login_errorMessage__VDOGA\"};"],"sourceRoot":""}